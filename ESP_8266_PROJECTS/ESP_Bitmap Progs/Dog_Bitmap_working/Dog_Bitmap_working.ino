// UTFT_Demo_320x240_Serial_SW
// Copyright (C)2015 Dimitris Lampridis. All right reserved
//
// based on original UTFT_Demo_320x240_Serial:
// Copyright (C)2015 Rinky-Dink Electronics, Henning Karlsen. All right reserved
// web: http://www.RinkyDinkElectronics.com/
//
// This program is a demo of how to use most of the functions
// of the library with a supported display module.
//
// This demo was made for serial modules with a screen
// resolution of 320x240 pixels.
//
// This demo implements the serial interface via software (bit-banging).
//
// This program requires the UTFT library.

// Requred for data transfer
#include <pgmspace.h>

 unsigned int jrt3030[1110] PROGMEM={
0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF, 0xFFFF, 0xF7FF, 0xFFFF, 0xFFFD, 0xFFDF, 0xFFFF, 0xFFFE, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF,   // 0x0010 (16) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0020 (32) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF, 0xF7FF, 0xF7FF,   // 0x0030 (48) pixels
0xF7FF, 0xFFFF, 0xFFFF, 0xF7FF, 0xF7FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7DF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7FF,   // 0x0040 (64) pixels
0xF7FF, 0xF7DF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF,   // 0x0050 (80) pixels
0xF7FF, 0xF7FF, 0xF7FF, 0xFFFF, 0xFFFF, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0xFFDE, 0xFFBE, 0xFF9E, 0xFFFF,   // 0x0060 (96) pixels
0xFFFF, 0xFFFF, 0xFFBF, 0xFFFF, 0xF7DF, 0xFFFF, 0xFFFF, 0xF7BF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF,   // 0x0070 (112) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFF5A, 0xC570, 0xAC8E, 0x9C0E, 0xF6DA, 0xDE15, 0xBCCE, 0xC572,   // 0x0080 (128) pixels
0xBD10, 0xB46E, 0xAC4D, 0xCD10, 0xBCCF, 0xC510, 0xE655, 0xCD32, 0xC532, 0xEEB8, 0xFF9C, 0xFFFE, 0xFFFF, 0xF7DE, 0xF7FF, 0xFFFF,   // 0x0090 (144) pixels
0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xF7FF, 0xFFFF, 0xFFBF, 0xFFBE, 0xF75C, 0xBCF1, 0x8B28, 0x8AC4, 0x8284,   // 0x00A0 (160) pixels
0x5982, 0x934A, 0xB40B, 0xBBE8, 0xC4AD, 0xBC6C, 0xC46C, 0xD4EE, 0xED90, 0xCC6B, 0xD48B, 0xCC6A, 0xABE6, 0x9305, 0x9B68, 0xCCF0,   // 0x00B0 (176) pixels
0xE615, 0xF6FA, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDE, 0xFFDE, 0xF7FF, 0xF7FF, 0xFFFF, 0xFF5C, 0xD5B3,   // 0x00C0 (192) pixels
0x8B68, 0x8328, 0x7A85, 0x82A6, 0x7A64, 0x7A64, 0xB42A, 0xBC0A, 0xBC2A, 0xE655, 0xF6D8, 0xDE36, 0xD5F5, 0xFEF8, 0xD551, 0xCCCD,   // 0x00D0 (208) pixels
0xCC6C, 0xABE7, 0x8262, 0x8AA5, 0xB3CA, 0xBC0A, 0xBC4C, 0xB48D, 0xCDD3, 0xFF7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFFF,   // 0x00E0 (224) pixels
0xFFFF, 0xFFFF, 0xCD94, 0x9BAB, 0x9327, 0xA387, 0x7285, 0x6A24, 0x7AC7, 0x5961, 0x9B67, 0xB3E9, 0xB40A, 0xC46C, 0xE6B9, 0xFFBE,   // 0x00F0 (240) pixels
0xF7BE, 0xEF9E, 0xF79D, 0xD5F5, 0xCD0F, 0xCC8C, 0xCCAD, 0x9B28, 0x6161, 0x9B07, 0xBC09, 0xB3E7, 0xB3E8, 0xC46B, 0xD5D4, 0xFFFE,   // 0x0100 (256) pixels
0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFDF, 0xDE77, 0x9BA9, 0xA387, 0xA367, 0x9B08, 0x7224, 0x6A44, 0x9388, 0x61E2, 0x8AC5,   // 0x0110 (272) pixels
0xAB88, 0xBC2A, 0xBC6B, 0xC532, 0xEED9, 0xF77C, 0xF79D, 0xF75B, 0xD592, 0xCC2A, 0xEC8A, 0xE4ED, 0xD4AD, 0x7A23, 0x8AE6, 0xABC8,   // 0x0120 (288) pixels
0xB3E9, 0xB3A9, 0xC3CB, 0xAC4D, 0xFFFD, 0xFFFF, 0xF7FF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xD5F5, 0x9327, 0xB3A8, 0x9327, 0x72C7,   // 0x0130 (304) pixels
0x6265, 0x7AA5, 0x9347, 0x7285, 0x8AE7, 0xAB67, 0xCC29, 0xB3C9, 0xC3EA, 0xBC4D, 0xEE55, 0xE79E, 0xF6D7, 0xCC4A, 0xD429, 0xDC4B,   // 0x0140 (320) pixels
0xD4AC, 0xCC8C, 0xABA8, 0x8243, 0xB3C9, 0xB40A, 0xAC0A, 0xB42B, 0xAC0C, 0xFFFF, 0xF7FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0150 (336) pixels
0xFF5B, 0x9349, 0x92E5, 0x8B07, 0x6A66, 0x6224, 0x7224, 0x9327, 0x6A44, 0x8B07, 0xA388, 0xB3E9, 0xBC4B, 0xBC07, 0xB3A7, 0xC409,   // 0x0160 (352) pixels
0xE6DA, 0xFE55, 0xC46B, 0xCC6A, 0xD4CB, 0xD48B, 0xCC8B, 0xBC0A, 0x8AC5, 0xB3E9, 0xB3E9, 0xBC2A, 0xBC2A, 0xAC2C, 0xFFFF, 0xF7FF,   // 0x0170 (368) pixels
0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF, 0xF7FF, 0xFFFE, 0xB4D0, 0x9328, 0x82A6, 0x7287, 0x7266, 0x8285, 0x7A64, 0x61C2, 0x7A85, 0x92E5,   // 0x0180 (384) pixels
0xB3E8, 0xBC6A, 0xD4CA, 0xC428, 0xBB24, 0xDE17, 0xED51, 0xCCCD, 0xBC08, 0xB407, 0xE4ED, 0xDCCC, 0xCC4A, 0xAB67, 0xA368, 0xB3C9,   // 0x0190 (400) pixels
0xB3E9, 0xAB88, 0xB46E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0xE677, 0x936A, 0x6A04, 0x7A86, 0x59E3,   // 0x01A0 (416) pixels
0x9348, 0x7202, 0x69E2, 0xB40B, 0xBC4B, 0x9AE5, 0x92C4, 0xC46B, 0xBBE9, 0xCBC6, 0xDE97, 0xCC6B, 0xC42A, 0xB386, 0xCC4A, 0xC46C,   // 0x01B0 (432) pixels
0xD4EE, 0xE4EC, 0xC408, 0x8AE5, 0xB42B, 0xBC4B, 0x9369, 0xBD10, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BF, 0xFFFF, 0xFFFF,   // 0x01C0 (448) pixels
0xFFBD, 0x9BEC, 0x7AC6, 0x7A85, 0x6A44, 0x8B27, 0x5981, 0x8AE6, 0x7AE7, 0x72A8, 0x8329, 0x7245, 0xAB68, 0xABA9, 0xCC6A, 0xE6D8,   // 0x01D0 (464) pixels
0xC44A, 0xBC09, 0xAB68, 0xA3AB, 0x28E2, 0x3922, 0xABA8, 0xCC09, 0xB40B, 0xA3EA, 0xB40B, 0x9B8A, 0xCDB3, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x01E0 (480) pixels
0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xFF7B, 0x7AE8, 0x7285, 0x6A23, 0x8327, 0x59C2, 0x4982, 0x20A1, 0x0862, 0xC619,   // 0x01F0 (496) pixels
0x3965, 0x9B06, 0xB3EA, 0xC48C, 0xEED9, 0xD4EE, 0xBC0A, 0x7AE9, 0x3124, 0x52ED, 0x2104, 0x9B69, 0xB3A7, 0xE613, 0xB46D, 0xC42A,   // 0x0200 (512) pixels
0xBC0B, 0xDE57, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xFFFF, 0xFFFF, 0xF7BD, 0xE698, 0x6A87, 0x72C7, 0x8328,   // 0x0210 (528) pixels
0x6A45, 0x7AC7, 0x28E2, 0x0001, 0x10C3, 0x49E7, 0x9326, 0xBBE9, 0xC48D, 0xFF3B, 0xDE37, 0xBC4C, 0x6AC9, 0x41A4, 0x1861, 0x3144,   // 0x0220 (544) pixels
0xBC8D, 0xBC2A, 0xF719, 0xD5D4, 0xBC0A, 0xBBEA, 0xEEF9, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7FF, 0xFFFF,   // 0x0230 (560) pixels
0xFFFF, 0xFFFF, 0xD617, 0x832A, 0xFF19, 0x7AA7, 0x7A85, 0x6225, 0x2923, 0x3101, 0x7245, 0xA3CA, 0xC46B, 0xCD31, 0xF75B, 0xE73D,   // 0x0240 (576) pixels
0xF613, 0xAC6F, 0xABCA, 0x92E7, 0x9BAB, 0xCC6B, 0xBC4B, 0xF7BD, 0xFFFE, 0xB44C, 0xBC4C, 0xFF5B, 0xFFFF, 0xFFFF, 0xFFFE, 0xFFFF,   // 0x0250 (592) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF77C, 0x7B09, 0x7AC6, 0x82C5, 0x9327, 0xA3A8, 0x92E6,   // 0x0260 (608) pixels
0x9328, 0xBCAF, 0xCDD4, 0xEF7C, 0xEFBE, 0xF77D, 0xEE97, 0xCD10, 0xC46C, 0xC44A, 0xCC6B, 0xB44C, 0xFFDD, 0xFFFF, 0xBD31, 0xBC8D,   // 0x0270 (624) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x942E,   // 0x0280 (640) pixels
0x8B28, 0x82A5, 0x9B47, 0x8B06, 0x9328, 0xC553, 0xEED9, 0xF71A, 0xF77C, 0xF7BE, 0xF7BE, 0xFF9C, 0xEE97, 0xCCCD, 0xDCCB, 0xDCCC,   // 0x0290 (656) pixels
0xBCF0, 0xFFBE, 0xFFFF, 0xFFFF, 0xFFBD, 0xFFFF, 0xFFDF, 0xF7DF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x02A0 (672) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xF79D, 0xDE98, 0x938A, 0x8AE6, 0xA368, 0x8B48, 0xA46E, 0xDF1B, 0xE6FB, 0xF73C, 0xEF1B, 0xEF1B, 0xF7BE,   // 0x02B0 (688) pixels
0xEF9D, 0xF7BE, 0xEE96, 0xD4CD, 0xCCAD, 0xEED9, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x02C0 (704) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xACF1, 0x8B28, 0x9348, 0x7AE8, 0xB594, 0xCEDA,   // 0x02D0 (720) pixels
0xE73C, 0xEF3C, 0xF75C, 0xE6DB, 0xEF1C, 0xEF7D, 0xEF7D, 0xF79D, 0xE656, 0xDE15, 0xFFBD, 0xF7DF, 0xFFFF, 0xFFDE, 0xF7DF, 0xFFDF,   // 0x02E0 (736) pixels
0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7FF, 0xE6DA,   // 0x02F0 (752) pixels
0xA42D, 0x8329, 0xA4B0, 0xBE18, 0xDE99, 0xC5F6, 0xB554, 0x7B8D, 0x83CF, 0xCE17, 0xEF3B, 0xF79C, 0xE75D, 0xDF1B, 0xD678, 0xE71B,   // 0x0300 (768) pixels
0xEF7C, 0xE73C, 0xEF3B, 0xD699, 0xE6FB, 0xFFFF, 0xFFFF, 0xFFFF, 0xF79D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0310 (784) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xF7FF, 0xE73C, 0xBD74, 0x838C, 0x9CB1, 0xAD96, 0xD615, 0x4A06, 0x20E3, 0x39A6, 0x4A28, 0x5A68, 0xD657,   // 0x0320 (800) pixels
0xFF7C, 0xEF7C, 0xE73B, 0xDEFA, 0xE73B, 0xE71B, 0xD6BA, 0xD6DA, 0xEF9D, 0xE71B, 0xB554, 0x8C0F, 0x9CB1, 0xB595, 0xFFFF, 0xFFFF,   // 0x0330 (816) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xF79E, 0xB575, 0xB574, 0xAD13, 0xBD95, 0xBD73, 0x3964,   // 0x0340 (832) pixels
0x20E3, 0x3165, 0x2923, 0x41C6, 0xD637, 0xEF5C, 0xF75B, 0xE6D9, 0xE6FA, 0xDF1B, 0xDF1B, 0xEF3B, 0xC617, 0xA575, 0xE71B, 0xFFBD,   // 0x0350 (848) pixels
0xEF3B, 0xCE37, 0xE6FA, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0xAD75,   // 0x0360 (864) pixels
0xB575, 0xA4B1, 0xACD1, 0xBD75, 0x6B2C, 0x18A2, 0x20E2, 0x3164, 0x62A9, 0xD679, 0xDF1C, 0xEF7D, 0xE6FA, 0xE6FB, 0xD71D, 0xEF7D,   // 0x0370 (880) pixels
0xFF1A, 0xFF3A, 0xA514, 0x8C30, 0xEF3C, 0xF79D, 0xEF5C, 0xEF5C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0380 (896) pixels
0xFFDF, 0xFFFF, 0xFFDE, 0xBDF7, 0xB595, 0xB575, 0xB575, 0x9C91, 0xA4F3, 0x8BEF, 0x41C6, 0x41E7, 0x49E7, 0x8C30, 0xD679, 0xE6FB,   // 0x0390 (912) pixels
0xEF1B, 0xDEDA, 0xDEDA, 0xE73B, 0xEF7C, 0xF79D, 0xEF5C, 0xE71B, 0x6AA9, 0xACF2, 0xEF5B, 0xEF5C, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03A0 (928) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDE, 0xB595, 0xAD54, 0xB595, 0xBDB6, 0xB554, 0xA4B2, 0x83EF, 0x732C,   // 0x03B0 (944) pixels
0x5228, 0x6AEB, 0x7B8E, 0xCE38, 0xDE99, 0xE6FB, 0xE6FB, 0xE71B, 0xEF3C, 0xEF5C, 0xEF7C, 0xEF7C, 0xEF5C, 0xC574, 0x5226, 0xCE16,   // 0x03C0 (960) pixels
0xEF5C, 0xF77D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xB595, 0xAD54, 0xB595,   // 0x03D0 (976) pixels
0xBD75, 0xBD95, 0xC5D7, 0xB555, 0x83AE, 0x8C10, 0x8BEF, 0xC5B6, 0xD658, 0xDEDA, 0xE6FB, 0xE71B, 0xEF3C, 0xEF5C, 0xEF5C, 0xEF7C,   // 0x03E0 (992) pixels
0xF77D, 0xEF7D, 0xF73B, 0x6B0A, 0x9C90, 0xEF5C, 0xEF3C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03F0 (1008) pixels
0xFFDF, 0xEF5D, 0xB596, 0xAD55, 0xB595, 0xB554, 0xB555, 0xB534, 0xBDB6, 0xCDF7, 0xC5D7, 0xCE17, 0xD638, 0xD679, 0xDEDA, 0xE71B,   // 0x0400 (1024) pixels
0xE71B, 0xEF5C, 0xEF7C, 0xEF7D, 0xF79D, 0xF79D, 0xEF7D, 0xEF1A, 0xBDB5, 0x62A9, 0xD678, 0xEF7C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0410 (1040) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE39, 0xAD55, 0xAD34, 0xB595, 0xB575, 0xBD96, 0xBDB6, 0xC5B6, 0xBDB6, 0xBDB6,   // 0x0420 (1056) pixels
0xCE17, 0xDE99, 0xD699, 0xDEDA, 0xE71B, 0xE71B, 0xEF5C, 0xEF7C, 0xF77D, 0xF7BD, 0xF7BD, 0xEF7D, 0xF75B, 0xDE99, 0x6B0A, 0xC5F6,   // 0x0430 (1072) pixels
0xF79D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xAD54, 0xA4F3, 0xA513, 0xB595, 0xBDB6,   // 0x0440 (1088) pixels
0xBDB6, 0xBDB6, 0xC5F7, 0xC5D7, 0xC5D7, 0xCE17, 0xD679, 0xD679, 0xE6FB, 0xDEFA, 0xE71B, 0xEF5C, 0xEF7C, 0xEF7C, 0xF79D, 0xF7BD,   // 0x0450 (1104) pixels
};
//Setup Bitmap data array in Progmem
//extern unsigned int startrek[0x3E04];
// unsigned int jrt3030[1110];
#include <UTFT.h>
#include <SPI.h> // not necessary if Arduino IDE version >=1.6.6

// Declare which fonts we will be using
extern uint8_t SmallFont[];

// Modify the line below to match your display and wiring:
UTFT myGLCD ( ILI9341_S5P, 13, 14, 5, 4, 2 );

void setup() {

    // Setup the LCD
    myGLCD.InitLCD (  );
    myGLCD.setFont ( SmallFont );

}

void loop (  ) {
   

    // Clear the screen and draw the frame
    myGLCD.clrScr (  );

   // myGLCD.setColor ( 255, 0, 0 );
    //myGLCD.fillRect ( 0, 0, 319, 13 );
    //myGLCD.setColor ( 64, 64, 64 );
    //myGLCD.fillRect ( 0, 226, 319, 239 );
    //myGLCD.setColor ( 255, 255, 255 );
    //myGLCD.setBackColor ( 255, 0, 0 );
    //myGLCD.print ( String("* Universal Color TFT Display Library *"), CENTER, 1 );
    //myGLCD.setBackColor ( 64, 64, 64 );
    //myGLCD.setColor ( 255, 255, 0 );
    //myGLCD.print ( String("<http://www.RinkyDinkElectronics.com/>"), CENTER, 227 );
    //delay ( 10000 );
    //Draw Bitmap from Progmem
   // myGLCD.fillScr(255, 255, 255);
  //myGLCD.setColor(255, 255, 255);
   // myGLCD.drawBitmap (105, 80, 126, 60, startrek, 1);//Problems displays 2 images any other setting is garbled????????
//delay(5000);
     myGLCD.drawBitmap (105, 80, 37, 30, jrt3030, 2);
     delay(5000);
}
